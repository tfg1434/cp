1. Instead of considering both cases where one variable is bigger/smaller than the other, you can swap them WLOG.
2. Consider using python instead of cpp if applicable.
3. It's always easier to use and debug static memory.
4. while(n--) != while(--n)
5. Make test cases, draw diagrams, just do something!
6. If you have strings on top of each other, consider the columns.
7. Consider parity!
8. Watch for overflow. Can't rely on some grader (USACO) to tell you.
9. You can manipulate your equation algebraically!
10. Create new subproblems.
11. Casework makes the dream work (especially edge cases)!
12. What's the longest the answer can be?
13. Quantify it.
14. # of xs instead of xs.
15. If k works implies k + 1 works, use binary search!
16. Give some leeway in your ranges; you are human after all.
17. Subproblems. Instead of doing operation on the whole array, maybe do it on a pair.
18. gcd(i, i + 1) = 1 for any integer i >= 1.
19. Monkey see power of 2. Monkey think binary.
20. Monkey see long time limit. Monkey think brute force.
21. Sum of XOR of all possible subsequences is OR of all elements * 2^(n-1).
22. Rewrite the original inequality/equation.
23. Perform a reverse operation.
24. Set is ordered!
25. What if you iterate backwards?
26. How can you represent n?
27. Instead of worrying about going out of bounds, use a big array.
28. Let's take each number __ __.
29. BE METHODICAL
30. After __ operations, __ stays the same.
31. Seeing a 2d problem, is it really 2d?
32. Set an arbitrary answer, then try to fix it greedily.
33. x + c (mod m) = x + c | x - (m - c)
34. If you want to dispose of something, quantify where you will dipose it. (applies irl too)
35. Force the problem into a topic you already know (dp, binary search, greedy, ...)
36. Not all elements are equally important (useful).
